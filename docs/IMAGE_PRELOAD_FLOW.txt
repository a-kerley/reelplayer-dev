```
┌─────────────────────────────────────────────────────────────────────────┐
│                     IMAGE PRELOADING SYSTEM FLOW                        │
└─────────────────────────────────────────────────────────────────────────┘

TRIGGER EVENTS
──────────────

┌─────────────────┐           ┌─────────────────┐
│ Playlist Render │           │  Track Change   │
│   (Initial)     │           │   (During Use)  │
└────────┬────────┘           └────────┬────────┘
         │                             │
         │                             │
         └──────────┬──────────────────┘
                    │
                    ▼
         ┌──────────────────────┐
         │ preloadBackground    │
         │      Images()        │
         └──────────┬───────────┘
                    │
                    │ Identifies images to preload:
                    │ • Current track BG
                    │ • Next track BG (+1 index, wraps)
                    │ • Previous track BG (-1 index, wraps)
                    │ • Project title image
                    │ • Main background (if enabled)
                    │
                    ▼
         ┌──────────────────────┐
         │  Remove Duplicates   │
         │  Add to Queue        │
         └──────────┬───────────┘
                    │
                    ▼
         ┌──────────────────────┐
         │ processImagePreload  │
         │      Queue()         │
         └──────────┬───────────┘
                    │
                    │
                    ▼

SEQUENTIAL PROCESSING LOOP
──────────────────────────

    ┌─────────────────────────┐
    │  Pop next URL from queue │
    └────────────┬─────────────┘
                 │
                 ▼
         ┌───────────────┐         YES
         │ Already cached? ├──────────►  Skip to next
         └───────┬────────┘
                 │ NO
                 ▼
         ┌───────────────┐
         │  Create new    │
         │  Image() obj   │
         └───────┬────────┘
                 │
                 ▼
         ┌───────────────┐
         │  Set img.src   │
         │  (start load)  │
         └───────┬────────┘
                 │
        ┌────────┴────────┐
        ▼                 ▼
   ┌─────────┐      ┌─────────┐
   │ onload  │      │ onerror │
   │ SUCCESS │      │  FAIL   │
   └────┬────┘      └────┬────┘
        │                │
        │                │
        └────────┬───────┘
                 │
                 ▼
         ┌───────────────┐
         │ Add to cache  │
         └───────┬────────┘
                 │
                 ▼
         ┌───────────────┐         YES    ┌──────────────┐
         │ Cache > 10?   ├────────────────► Remove oldest│
         └───────┬────────┘                └──────────────┘
                 │ NO
                 ▼
         ┌───────────────┐
         │ More in queue?│
         └───────┬────────┘
                 │
        ┌────────┴────────┐
        ▼                 ▼
      ┌────┐           ┌────┐
      │YES │           │ NO │
      └─┬──┘           └─┬──┘
        │                │
        │                ▼
        │         ┌──────────┐
        │         │   DONE   │
        │         └──────────┘
        │
        └────► LOOP BACK TO TOP


CACHE STRUCTURE
───────────────

preloadedImages: Map {
  'assets/images/bg1.jpg' => Image { ... },
  'assets/images/bg2.jpg' => Image { ... },
  'assets/images/bg3.jpg' => Image { ... },
  ...
}

preloadQueue: [
  'assets/images/bg4.jpg',
  'assets/images/bg5.jpg',
  ...
]


USAGE FLOW
──────────

User loads track → Preload triggered
                         ↓
              Images load in background
                         ↓
              Stored in browser cache
                         ↓
         CSS applies background-image
                         ↓
              Browser finds in cache
                         ↓
             ⚡ INSTANT DISPLAY ⚡


CACHE EVICTION (LRU)
────────────────────

Size: 10/10 (FULL)

┌────┬────┬────┬────┬────┬────┬────┬────┬────┬────┐
│ 1  │ 2  │ 3  │ 4  │ 5  │ 6  │ 7  │ 8  │ 9  │ 10 │
└─▲──┴────┴────┴────┴────┴────┴────┴────┴────┴────┘
  │
  └── Oldest (First in) - REMOVED when new image added

┌────┬────┬────┬────┬────┬────┬────┬────┬────┬────┐
│ 2  │ 3  │ 4  │ 5  │ 6  │ 7  │ 8  │ 9  │ 10 │ 11 │
└────┴────┴────┴────┴────┴────┴────┴────┴────┴─▲──┘
                                                │
                                    Newest (Last in)


PERFORMANCE METRICS
──────────────────

Network:
  • First load: N requests (N = unique images)
  • Subsequent: 0 requests (browser cache)

Memory:
  • Per image: ~10-50MB (decoded)
  • Cache of 10: ~100-500MB typical

CPU/GPU:
  • Minimal - browser-optimized decoding
  • requestIdleCallback = non-blocking

User Experience:
  • Load delay: 0ms (instant from cache)
  • Visual glitches: None
  • Smooth transitions: ✓
```
